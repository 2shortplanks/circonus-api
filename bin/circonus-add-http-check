#!/usr/bin/env ruby
#
# Add an HTTP site check
#

require 'circonusutil'

host = nil
cu = CirconusUtil.new() { |opts,options|
  options[:brokers] = []
  options[:hostname] = nil
  options[:url] = nil
  options[:tags] = ['application:http']
  opts.banner = "Usage: #{File.basename($0)} hostname\n"
  opts.on( '--tags TAGLIST',"Apply comma separated list of tags (default: empty list)" ) { |t| options[:tags] += options[:tags] + t.split(/,/) }
  opts.on( '--brokers BROKER',"Comma separated list of broker names to use" ) { |t| options[:brokers] = t.split(',') }
  opts.on( '--hostname HOSTNAME',"Hostname to add" ) { |t| options[:hostname] = t }
  opts.on( '--url URL',"URL to test" ) { |t| options[:url] = t }
}
if cu.options[:brokers].empty?
  puts "Missing brokers list"
  exit -1
end
if cu.options[:hostname].empty?
  puts "Missing hostname"
  exit -1
end
if cu.options[:url].empty?
  puts "Missing url"
  exit -1
end

def do_update_check_bundle(cu,data)
  search_check_bundle = cu.circonus.list_check_bundle({'display_name' => data['display_name']})
  existing = false
  if search_check_bundle.any? # already exists...
    existing = true
    r = cu.circonus.update_check_bundle(search_check_bundle.first['_cid'],data)
  else
    r = cu.circonus.add_check_bundle(data)
  end
  if not r.nil? then
    pp r
    print "Success (#{existing ? 'updating' : 'adding'} #{data['display_name']})\n"
  end
end

agents = cu.circonus.list_broker({'_name'=>cu.options[:broker]})
agentid = agents.select { |a| a['_name'] == cu.options[:broker] }.first['_cid']
if agentid.nil?
  puts "Missing agent id!"
  exit -1
end

brokerids = []
cu.options[:brokers].each do |broker|
  circonus_brokers = cu.list_broker({'_name'=>broker})
  id = circonus_brokers.map { |m| m['_cid'] }
  brokerids << id
end

bundle_stub = {
  "brokers"=>[ ],
  "display_name"=>nil,
  "period"=>60,
  "target"=>nil,
  "timeout"=>10,
  "type"=>"http",
  "tags"=>[],
  "metrics"=> [
    {"name"=>"body_match", "type"=>"text"},
    {"name"=>"bytes", "type"=>"numeric"},
    {"name"=>"code", "type"=>"text"},
    {"name"=>"duration", "type"=>"numeric"},
    {"name"=>"truncated", "type"=>"numeric"},
    {"name"=>"tt_connect", "type"=>"numeric"},
    {"name"=>"tt_firstbyte", "type"=>"numeric"}
  ],
  "config" => {
    "url"=>nil,
    "http_version"=>"1.1",
    "header_Host"=>nil,
    "read_limit"=>"1048576",
    "method"=>"GET",
    "code"=>"^200$",
    "redirects"=>"0"
  }
}

bundle = bundle_stub.clone
bundle['brokers'] = brokerids
bundle['target'] = cu.options[:hostname]
bundle['tags'] = cu.options[:tags]
bundle['display_name'] = "#{cu.options[:hostname]} http"
bundle['config']['url'] = cu.options[:url]
bundle['config']['header_Host'] = cu.options[:hostname]

search_bundles = cu.circonus.search_check_bundle(bundle['display_name'],'display_name')
if search_bundles.any? # already exists...
  r = cu.circonus.update_check_bundle(search_bundles.first['_cid'],bundle)
else
  r = cu.circonus.add_check_bundle(bundle)
end
if not r.nil? then
  print "Success\n"
  #pp r
end

